"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eslintConfigRX30I = void 0;
exports.eslintConfigRX30I = {
    'curly': 'error',
    'guard-for-in': 'error',
    'no-caller': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-invalid-this': 'error',
    'no-multi-str': 'error',
    'no-new-wrappers': 'error',
    'no-throw-literal': 'error',
    'no-unexpected-multiline': 'error',
    'no-with': 'error',
    'prefer-promise-reject-errors': 'error',
    'no-array-constructor': 'error',
    'no-new-object': 'error',
    'constructor-super': 'error',
    'no-new-symbol': 'error',
    'no-this-before-super': 'error',
    'new-cap': ['error', { capIsNew: false }],
    'no-unused-vars': ['error', { args: 'none', caughtErrors: 'none' }],
    'one-var': ['error', { var: 'never', let: 'never', const: 'never' }],
    'no-var': 'error',
    'prefer-const': ['error', { destructuring: 'all' }],
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'array-bracket-newline': 'off',
    'array-bracket-spacing': ['error', 'never'],
    'block-spacing': ['error', 'never'],
    'brace-style': 'error',
    'camelcase': ['error', { properties: 'never' }],
    'comma-dangle': ['error', 'always-multiline'],
    'comma-spacing': 'error',
    'comma-style': 'error',
    'computed-property-spacing': 'error',
    'eol-last': 'error',
    'func-call-spacing': 'error',
    'indent': ['error', 2, { SwitchCase: 1 }],
    'key-spacing': ['error', { align: 'colon' }],
    'keyword-spacing': 'error',
    'linebreak-style': 'error',
    'max-len': ['error', { code: 120, comments: 120, tabWidth: 2, ignoreUrls: true }],
    'no-mixed-spaces-and-tabs': 'error',
    'no-multi-spaces': ['error', { ignoreEOLComments: true, exceptions: { VariableDeclarator: true, AssignmentExpression: true } }],
    'no-multiple-empty-lines': ['error', { max: 2 }],
    'no-tabs': 'error',
    'no-trailing-spaces': 'error',
    'object-curly-spacing': ['error', 'always'],
    'operator-linebreak': ['error', 'after', { overrides: { '?': 'before', ':': 'before' } }],
    'padded-blocks': ['error', 'never'],
    'quote-props': ['error', 'consistent'],
    'quotes': ['error', 'single', { allowTemplateLiterals: true }],
    'semi': 'error',
    'semi-spacing': 'error',
    'space-before-blocks': 'error',
    'space-before-function-paren': ['error', { asyncArrow: 'always', anonymous: 'never', named: 'never' }],
    'spaced-comment': ['error', 'always'],
    'switch-colon-spacing': 'error',
    'arrow-parens': ['error', 'always'],
    'generator-star-spacing': ['error', 'after'],
    'rest-spread-spacing': 'error',
    'yield-star-spacing': ['error', 'after'],
    '@typescript-eslint/no-unused-vars': ['error', {
            caughtErrors: 'all',
            caughtErrorsIgnorePattern: '^_',
            destructuredArrayIgnorePattern: '^_',
            args: 'none'
        }],
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-extraneous-class': ['error', { allowStaticOnly: true }],
};
//# sourceMappingURL=index.js.map